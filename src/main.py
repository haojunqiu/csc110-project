"""CSC110 final project, main module

Descriptions
===============================

This module perform our computations on the data.
By calling all the functions, it will produce all outputs we need.

Copyright and Usage Information
===============================

All forms of distribution of this code, whether as given or with any changes, are
expressly prohibited. All rights reserved.

This file is Copyright (c) 2020 Runshi Yang, Chenxu Wang and Haojun Qiu
"""
from typing import Tuple
from simple_regression import perform_regression, predict
from multiple_regression import multiple_linear_regression
from read_data import temp_disease_list_2016, temp_disease_list_2014,\
    prec_disease_list_2016, prec_disease_list_2014, multiple_2014_data


def generate_temp_lyme_model() -> Tuple[float, float, float]:
    """Use the weather and disease data of 2014 to generate a sample linear regression model
    Return (a, b, r_squared) for the generated model
    """
    train_data = temp_disease_list_2014('datasets/weather_2014.csv', 'datasets/disease_2014.csv')

    return perform_regression(train_data, "temperature",
                              "temperature-lyme sample linear regression model")


def perform_temp_lyme_prediction() -> float:
    """Use the model generated by data of 2014 to predict the data in 2016
    Return r_squared for the predicted outcome.
    """
    test_data = temp_disease_list_2016('datasets/weather_2016.csv', 'datasets/disease_2016.csv')

    return predict(test_data, generate_temp_lyme_model(), "temperature",
                   "prediction by temperature-lyme sample linear regression model")


def generate_prec_lyme_model() -> Tuple[float, float, float]:
    """Use the precipitation and disease data of 2014 to generate a sample linear regression model
    Return (a, b, r_squared) for the generated model
    """
    train_data = prec_disease_list_2014('datasets/weather_2014.csv', 'datasets/disease_2014.csv')

    return perform_regression(train_data, "precipitation",
                              "precipitation-lyme sample linear regression model")


def perform_prec_lyme_prediction() -> float:
    """Use the model generated by data of 2014 to predict the data in 2016
    Return r_squared for the predicted outcome.
    """
    test_data = prec_disease_list_2016('datasets/weather_2016.csv', 'datasets/disease_2016.csv')

    return predict(test_data, generate_prec_lyme_model(), "precipitation",
                   "prediction by precipitation-lyme sample linear regression model")


def perform_multiple_regression(temp: float, prec: float) -> None:
    """Use the temperature, precipitation and disease data of 2014 to generate
    a multiple linear regression model.
    Print r_squared, adjusted_r_squared, Intercept, Coefficients for the generated model and
    the predicted number of lyme cases for the input temperature and precipitation
    """
    test_data = multiple_2014_data('datasets/weather_2014.csv', 'datasets/disease_2014.csv')
    return multiple_linear_regression(test_data, temp, prec)


if __name__ == '__main__':
    import doctest

    doctest.testmod(verbose=True)

    import python_ta
    python_ta.check_all(config={
        'extra-imports': ['typing', 'simple_regression',
                          'multiple_regression', 'read_data', 'python_ta'],
        'allowed-io': [],
        'max-line-length': 100,
        'disable': ['R1705', 'C0200']
    })
